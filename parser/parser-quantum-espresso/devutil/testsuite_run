#!/usr/bin/env python
import os
import sys
import re
import subprocess
import io
import argparse
import logging


LOGGER=logging.getLogger(__name__)


baseDir = os.path.dirname(os.path.abspath(__file__))
qeDir = os.path.normpath(os.path.join(baseDir,"../"))

if not qeDir in sys.path:
        sys.path.insert(0, qeDir)

import parser_quantum_espresso

RE_IGNORE_FILE = re.compile(r".*\.(?:annotate|json)$")
RE_NO = re.compile(r"[^\|]+      no\|")
RE_GREPC = re.compile(r"(.*):(\d+)\S*$")
RE_WCL = re.compile(r"\s*(\d+)\s+(.*)$")

ANNOTATE = True

CALL_QEPARSER = ['python', 'parser_quantum_espresso.py', '--stream']

def run_tests(testsuite_dir, testsuite_base):
    annotated = []
    input_files = [] 
    testsuite_list_file = testsuite_base + ".input.json"
    testsuite_out = testsuite_base + ".out"
    testsuite_log = testsuite_base + ".log"
    testsuite_parsed_missing = testsuite_base + ".parsed_missing"
    with open(testsuite_list_file, "w") as input_stream:
        for filename in os.listdir(testsuite_dir):
            if RE_IGNORE_FILE.match(filename):
                continue
            src_file = testsuite_dir + "/" + filename
            input_stream.write(
                '{\n  "mainFileUri": "file://%s",\n  "mainFile": "%s",\n  "outFile": "%s"\n},\n' % (
                    src_file, src_file, src_file + ".stream.json"))
            annotated.append(src_file + ".annotate")
            input_files.append(src_file)
    with open(testsuite_list_file, "r") as input_stream, open(testsuite_out, "w") as input_stdout, open(testsuite_log, "w") as input_stderr:
        subprocess.call(
            CALL_QEPARSER,
            stdin=input_stream, stdout=input_stdout, stderr=input_stderr
        )
    input_nlines = {}
    with subprocess.Popen([
            'wc', '-l' ] + input_files, stdout=subprocess.PIPE) as wcl:
        for line in io.TextIOWrapper(wcl.stdout, encoding="utf-8"):
            if line == '':
                break
            line = line.rstrip()
            m = RE_WCL.match(line)
            if m is None:
                LOGGER.warning("skipping wc -l output: %s", line)
                continue
            input_nlines[m.group(2)] = int(m.group(1))
    if ANNOTATE:
        annotated_nlines = {}
        with subprocess.Popen([
                'wc', '-l' ] + annotated, stdout=subprocess.PIPE) as wcl:
            for line in io.TextIOWrapper(wcl.stdout, encoding="utf-8"):
                if line == '':
                    break
                line = line.rstrip()
                m = RE_WCL.match(line)
                if m is None:
                    LOGGER.warning("skipping wc -l output: %s", line)
                    continue
                annotated_nlines[m.group(2)] = int(m.group(1))
        with open(testsuite_parsed_missing, "w") as parsed_missing:
            pm = []
            with subprocess.Popen([
                    'grep', '-c', '     no|'] + annotated, stdout=subprocess.PIPE) as grepc:
                for line in io.TextIOWrapper(grepc.stdout, encoding="utf-8"):
                    if line == '':
                        break
                    m = RE_GREPC.match(line)
                    if not m:
                        LOGGER.error("unrecognized grep output: %s",line.rstrip())
                        continue
                    fname = m.group(1)
                    input_fname = re.sub(r"\.annotate",r"", fname)
                    aborted_parse = (input_nlines[input_fname] > (annotated_nlines[fname]-1))
                    if aborted_parse:
                        count_missing = -1
                    else:
                        count_missing =int(m.group(2))
                    pm.append( (count_missing, fname) )
            for num, fname in sorted(pm):
                parsed_missing.write("%5d %s\n" % (num, fname))

if __name__ == '__main__':
    CMDLINE_PARSER = argparse.ArgumentParser(
        description='run QE parser over testsuite')
    CMDLINE_PARSER.add_argument(
        '--no_annotate', action='store_true', default=False)
    CMDLINE_PARSER.add_argument(
        'file_base', default='testsuite', nargs='?')
    CMDLINE_PARSER.add_argument(
        'testsuite_dir', default='/srv/work/tmp/espresso/test-link', nargs='?')
    CMDLINE_ARGS = CMDLINE_PARSER.parse_args()

    if CMDLINE_ARGS.no_annotate:
        ANNOTATE = False
    else:
        CALL_QEPARSER.append('--annotate')

    run_tests(CMDLINE_ARGS.testsuite_dir, CMDLINE_ARGS.file_base)
